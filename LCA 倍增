#include<stdio.h>
#include<queue>
#include<iostream>
#include<deque>
#include<cstring>
#include <fstream>
#include <queue>
#include<math.h>
#define  ll long long
using namespace std;

int n, m, s, x, y, cnt;
int head[500010];
int fa[500010][22], lg[500010], depth[500010];
struct node
{
	int  too;
	int nextt;
}e[500010 << 1];
void add(int x, int y)
{
	e[++cnt].too = y;
	e[cnt].nextt = head[x];
	head[x] = cnt;
}
void dfs(int now, int fath)
{
	fa[now][0] = fath;
	depth[now] = depth[fath] + 1;
	for (int i = 1; i <= lg[depth[now]]; i++)
	{
		fa[now][i] = fa[fa[now][i - 1]][i - 1];
	}
	
	for (int i = head[now]; i; i = e[i].nextt)
	{
		if (e[i].too != fath)
			dfs(e[i].too, now);
	}
}
int LCA(int x, int y)
{
	if (depth[x] < depth[y])
		swap(x, y);
	while (depth[x] > depth[y])
	{
		x = fa[x][lg[depth[x] - depth[y]] - 1];
	}
	if (x == y)
		return x;
	for (int k = lg[depth[x]] - 1; k >= 0; --k)
	{
		if (fa[x][k] != fa[y][k])
			x = fa[x][k], y = fa[y][k];                           //这里就是为了防止不是最近的LCA，所以需要循环完。
	}
	return fa[x][0];
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m >> s;
	for (int i = 1; i < n; i++)
	{
		cin >> x >> y;
		add(x, y);
		add(y, x);
	}
	for (int i = 1; i <n; i++)                                  //这里是log_2(i)+1，为了加快程序运行
		lg[i] = lg[i - 1] + (1 << lg[i - 1] == i);
	dfs(s, 0);
	for (int i = 1; i <= m; i++)
	{
		int x1, y1;
		cin >> x1 >> y1;
		cout << LCA(x1, y1) << endl;
	}
}

/*洛谷P3379*/
